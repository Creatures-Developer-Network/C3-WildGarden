
*GB Template
*# Pray-File "GB_Dragonfly.agent"
*# DS-Name "Dragonfly"
*# Depend gb_c3_conv.c16 dragonfly.c16
*# Attach gb_c3_conv.c16

*# desc = "C3 Dragonfly raw, buggy, unsupported conversion."
*# Agent Animation File = "gb_c3_conv.c16"
*# Agent Animation Gallery = "gb_c3_conv"
*# Agent Sprite First Image = 6
*# GB_Category = 3
*# Agent Author = "Creature Labs"

new: simp 2 15 8 "dragonfly" 26 0 2000
accg 0
aero 30

tick 4
attr 199
bhvr 16
setv ov00 0
setv ov01 2000
setv ov70 0
setv ov06 va66
setv ov10 1
setv ov11 -1
seta ov16 null
setv ov61 50
setv ov72 300
setv ov73 250
setv ov74 800
setv ov02 251
setv va50 3500
setv va51 400
mvsf game "ch_x" game "ch_y"

setv vely 0
doif va66 = 1
	setv va66 0
else
	setv va66 1
endi


*Dragonfly timer script
scrp 2 15 8 9
*add to life timer, subtract from energy
	addv ov01 1
	subv ov02 1
*If not pregnant
	doif ov70 <> 1
*Add 1 to sex drive
		addv ov20 1
	endi

*If pregnant
	doif ov70 = 1
		setv ov00 4
	endi

*Mark for death
	doif ov02 <= 0
		setv ov00 99
	endi
*Obstacle avoidance - left right
	doif obst 0 < 30
		setv ov10 1
		setv ov11 -1
	endi
	doif obst 1 < 30
		setv ov10 -1
		setv ov11 -1
	endi
*Obstacle avoidance - up down
	doif obst 2 < 30
		setv ov11 1
	endi
	doif obst 3 < 30
		setv ov11 -1
	endi
*Drowning but try to escape
	doif carr = null
		doif rtyp room ownr = 8
			setv ov11 -1
			subv ov02 20
*If pregnant, mark to lay egg
			doif ov70 eq 1
				setv ov00 5
			endi
			setv vely -40
		endi
	endi
*Go to die if marked for death
	doif ov00 = 99
		gsub die_
	endi

*If state is 5, lay egg
	doif ov00 eq 5
		gsub layg
	endi

*If energy is less than threshold, set state to 1 to trigger get food
	doif ov02 lt ov73
		setv ov00 1
	endi
*If state is 1, go to get food subroutine
	doif ov00 eq 1
		gsub gfod
	endi

*If state is 98, randomly return to roaming behaviour and restart timer
	doif ov00 = 98
		setv va66 rand 0 5
		doif va66 = 0
			setv ov00 0
			tick 4
		endi
	endi

*If state is 4, go to water.
	doif ov00 eq 4
		gsub gwtr
	endi

*If sex drive is high and not pregnant, go to mate-seeking behaviour
	doif ov20 gt 50
		doif ov70 eq 0
			setv ov00 2
		endi
	endi

*If state is 2, target and then seek out a mate
	doif ov00 eq 2
		seta ov16 null
		setv va47 2
		setv va48 15
		setv va49 8
		setv va45 ov06
		gsub seek
		targ ov16

		doif targ <> null
			targ ownr
			setv ov00 3
		else
			targ ownr
			setv ov00 0
		endi
		targ ownr
	endi
	doif ov00 eq 3
		gsub mate
	endi

*If state is 0 go to roam subroutine
	doif ov00 = 0
		gsub roam
	endi

	stop

*Die subroutine
	subr die_
		setv va50 posl
		setv va51 post
		setv va52 ov10


		new: simp 2 10 9 "dragonfly" 8 18 2000
		accg 3
		aero 10
		elas 1
		tick 4
		attr 195
		setv ov01 0
		setv ov61 12
		setv ov10 va52
		doif tmvt va50 va51 <> 1
			kill targ
			kill ownr
		else
			mvto va50 va51
			setv vely 0
		endi
		targ ownr
		kill targ
	retn

*Get food subroutine
	subr gfod
*Look for badbugs/pests first:
		setv va47 2
		setv va48 14
		setv va49 0
*If target is null, go to find subroutine
		doif ov16 = null
			gsub find
*If target is still null, seek out a goodbug instead
			doif ov16 = null
				setv va47 2
				setv va48 13
				setv va49 0
				gsub find
			endi
		endi
*If targ exists
		doif ov16 <> null
*Make the dragonfly hunt it
			targ ownr
			gsub hunt
*Once they touch their target, add to their energy, make the target be eaten
			doif touc ownr ov16 <> 0
				addv ov02 ov72
				mesg writ ov16 12
*Clear the target and go back to roaming
				seta ov16 null
				doif ov02 gt ov74
					setv ov00 0
				endi
			endi
*Change the movement of the dragonfly
			gsub vec2
*If anything else is true (if targ does not exist)
		else
*Roam instead
			targ ownr
			gsub roam
			stop
		endi
*Change the movement of the dragonfly
		targ ownr
		gsub ani_
		gsub mov_
		stop
	retn

*Rest on a plant subroutine
	subr rst_
		setv va47 2
		setv va48 4
		setv va49 0
		doif ov16 = null
			gsub find
		endi
		targ ov16
		doif targ <> null
			targ ownr
			gsub hunt
			doif touc ownr ov16 <> 0
				gsub slep
			endi
		else
			targ ownr
			setv ov00 0
		endi
		targ ownr
		gsub vect
		gsub ani_
		gsub mov_
		stop
	retn

*Go to water subroutine
	subr gwtr
		setv va60 prop grid ownr left 5
		setv va61 prop grid ownr rght 5
		setv va62 prop grid ownr _up_ 5
		setv va63 prop grid ownr down 5
		doif va60 > va61
			setv ov10 -1
		elif va60 < va61
			setv ov10 1
		endi
		doif va62 > va63
			setv ov11 -1
		elif va62 < va63
			setv ov11 1
		endi
		doif va60 = va61 and va62 = va63
			gsub roam
			stop
		endi

		gsub vect
		gsub ani_
		gsub mov_
		setv ov00 0
		stop
	retn

*Lay egg subroutine
	subr layg
		doif pose gt 3
			pose 17
		endi

		doif pose lt 4
			pose 16
		endi
		setv va50 posl
		setv va51 post



		inst
		setv va66 0
		esee 2 18 5
			addv va66 1
		next
		doif va66 < 4
			reps 5
				new: simp 2 18 5 "dragonfly" 12 68 2050
				accg 1
				perm 50
				elas 5
				fric 100
				tick 10
				attr 195

				setv ov00 0
				setv ov01 2000
				setv ov61 21
				setv ov70 0
				setv ov02 255
				doif tmvt va50 va51 <> 1
					kill targ
					targ ownr
				else
					mvto va50 va51
					setv vely 0
					anim [0 1 2 3 4 255]
				endi
			repe
		endi
		targ ownr
		gsub ani_
		setv ov70 0
		setv ov00 0
		setv ov20 0
		stop
	retn

*Sleep subroutine
	subr slep
		tick 30
		base 0
		doif pose gt 3
			base 12
			anim [0 1 2 3]
		endi
		doif pose lt 4
			base 8
			anim [0 1 2 3]
		endi
		velo 0 0
		inst
		targ ov16
		doif targ <> null
			setv va50 posx
			setv va51 posy
		else
			setv ov00 0
			stop
		endi
		targ ownr

		subv va51 40
		doif tmvt va50 va51 <> 1
			setv ov00 0
			stop
		endi
		mvto va50 va51
		setv ov00 98
		stop
	retn

*Seek subroutine - used for mates and food, uses Euclidean distance to find nearest object.
	subr seek
		setv va99 99999999
		inst
		seta va58 null
		esee va47 va48 va49
			doif ov06 ne va45
				setv va50 relx ownr targ
				setv va51 rely ownr targ
				doif va50 lt 0
					negv va50
				endi
				doif va51 lt 0
					negv va51
				endi
				setv va52 va50
				mulv va52 va52
				setv va53 va51
				mulv va53 va53
				setv va54 va52
				addv va54 va53
				doif va54 lt va99
					seta va58 targ
					setv va99 va54
				endi
			endi
		next
		targ va58
		doif targ <> null
			targ ownr
			seta ov16 va58
		else
			targ ownr
			seta ov16 null
		endi
		targ ownr
		slow
	retn

*Mate subroutine
	subr mate
		targ ov16
		doif targ <> null
			inst
			targ ownr
			gsub hunt
			doif touc ownr ov16 <> 0
				doif ov06 eq 1
					setv ov70 1
					setv ov00 4
				else
					setv ov00 0
				endi
				setv ov20 0
			endi
			slow
		else
			targ ownr
			setv ov00 0
		endi
		targ ownr
		gsub vect
		gsub ani_
		gsub mov_
		stop
	retn

*Roam subroutine
	subr roam
		setv va66 rand 0 10
		doif va66 < 5
			doif ov10 <> 0
				setv ov10 0
			else
				setv ov10 rand -1 1
			endi
		endi
		doif va66 > 5
			setv ov11 rand -1 1
		endi

		gsub vect
		gsub ani_
		gsub mov_
		stop
	retn

	subr vect
		setv va10 rand 0 60
		setv va11 rand 0 20
	retn

	subr vec2
		doif ov16 <> null
			targ ov16
			doif targ <> null
				targ ownr
				setv va50 relx ownr ov16
				setv va51 rely ownr ov16
				doif va50 lt 0
					negv va50
				endi
				doif va51 lt 0
					negv va51
				endi
				doif va50 > 60 or va51 > 60 or va50 = 0 or va51 = 0
					setv va10 rand 0 60
					setv va11 rand 0 20
				else
					divv va50 2
					divv va51 2
					setv va10 va50
					setv va11 va51
				endi
			else
				targ ownr
				setv ov00 0
			endi
			targ ownr
		else
			targ ownr
			setv ov00 0
			gsub roam
		endi
	retn


	subr ani_
		doif ov10 = 0
			loop
				setv ov10 rand -1 1
			untl ov10 <> 0
		endi

		doif ov10 < 0
			base 0
			anim [1 3 255]
		endi

		doif ov10 > 0
			base 4
			anim [1 3 255]
		endi

	retn

	subr mov_
		mulv va10 ov10
		mulv va11 ov11
		velo va10 va11
	retn

	subr find
		setv va99 99999999

		seta va58 null
		inst
		esee va47 va48 va49
			doif targ <> null
				setv va88 0
				doif va48 eq 13
					doif spcs eq 5
						setv va88 1
					endi
				endi
				doif va88 eq 0
					setv va50 relx ownr targ
					setv va51 rely ownr targ
					doif va50 lt 0
						negv va50
					endi
					doif va51 lt 0
						negv va51
					endi
					setv va52 va50
					mulv va52 va52
					setv va53 va51
					mulv va53 va53
					setv va54 va52
					addv va54 va53
					doif va54 lt va99
						seta va58 targ
						setv va99 va54
					endi
				endi
			endi
		next
		doif va58 <> null
			targ ownr
			seta ov16 va58
		else
			seta ov16 null
			targ ownr
		endi
		targ ownr
		slow
	retn

*Hunt subroutine
	subr hunt
*instantly
		inst
*set the target to ov16
		targ ov16
*If the target exists
		doif targ <> null
*Set temporary variables to the target's xy location
			setv va50 posx
			setv va51 posy
*Return target to the dragonfly itself
			targ ownr
*Compare the dragonfly's xy position to the target's - set movement ovs to help the dragonfly move towards the target
			doif posx lt va50
				setv ov10 1
			endi
			doif posx gt va50
				setv ov10 -1
			endi
			doif posy lt va51
				setv ov11 1
			endi
			doif posy gt va51
				setv ov11 -1
			endi
*If anything else is true (target does not exist)
		else
*Change the target to the dragonfly itself and reset it to roam
			targ ownr
			setv ov00 0
			seta ov16 null
			stop
		endi
	retn

endm

*Nymph collision script
scrp 2 15 8 6
	doif ov00 eq 99
		anim []
		doif ov10 le 0
			base 18
			anim [0 1 2 3]
			over
		endi
		doif ov10 gt 0
			base 22
			anim [0 1 2 3]
			over
		endi
		kill targ
	endi
	inst
	doif velx <= 0
		setv ov10 1
	endi
	doif velx > 0
		setv ov10 -1
	endi
	doif ov10 < 0
		base 0
		anim [1 3 255]
	endi

	doif ov10 > 0
		base 4
		anim [1 3 255]
	endi
	slow
endm

*Nymph drop script
scrp 2 15 8 5
	addv ov00 0
	tick 4
	setv velx 30
endm

*Dead dragonfly timer script
scrp 2 10 9 9
	elas 1
	fric 80
	addv ov01 1

	accg 3
	doif carr = null
		doif ov10 le 0
			base 0
			pose 0
			doif ov01 gt 200
				base 0
				anim [0 1 2 3]
				doif room targ <> -1 and carr = null
					altr room targ 3 0.1
					altr room targ 4 0.1
				endi
				kill targ
			endi

		endi
		doif ov10 gt 0
			base 0
			pose 4
			doif ov01 gt 200
				base 0
				anim [4 5 6 7]
				doif room targ <> -1 and carr = null
					altr room targ 3 0.1
					altr room targ 4 0.1
				endi
				kill targ
			endi

		endi
	endi
endm


scrp 2 15 8 256
	addv ov02 _p1_
endm

*Egg timer script
scrp 2 18 5 9

	addv ov01 1

	doif ov00 eq 0
		doif obst 3 eq 0
			setv ov00 1
			tick 10
			setv ov01 0
		endi
	endi
	doif ov00 eq 0
		doif carr = null
			doif rtyp room ownr = 8
				tick 2
				setv velx rand -4 4
			endi
		endi
	endi

	doif ov00 eq 1
		doif ov01 gt 50
			kill targ
		endi
		doif ov01 gt 0
			doif ov01 le 10
				doif pose ne 5
					setv va51 post
					setv va50 posl
					subv va51 22

					doif tmvt va50 va51 <> 1
						velo rand -2 2 rand -1 -3
						stop
					endi
					mvto va50 va51
				endi
				pose 5
			endi
		endi
		doif ov01 gt 10
			doif ov01 le 20
				pose 6
			endi
		endi
		doif ov01 gt 20
			doif ov01 le 30
				pose 7
			endi
		endi
		doif ov01 gt 30
			doif ov01 le 40
				pose 8
			endi
		endi
		doif ov01 gt 40
			doif ov01 le 41
				pose 9
				esee 2 13 5
					addv va66 1
				next
				doif va66 < 12
					gsub nymf
				endi
				targ ownr
			endi
		endi
		doif ov01 gt 40
			doif ov01 le 50
				pose 10
			endi
		endi

	endi


	subr nymf
		setv va50 posl
		setv va51 post
		setv va66 0
		esee 2 18 5
			addv va66 1
		next
		doif va66 < 8
			new: simp 2 13 5 "dragonfly" 41 26 2000
			accg 2
			perm 30
			tick 8
			attr 195
			aero 10
			bhvr 16
			setv ov00 0
			setv ov01 0
			seta ov16 null
			setv ov10 1
			setv ov11 -1
			seta ov16 null
			setv ov61 42
			setv ov72 20
			setv ov73 300
			setv ov74 250
			setv ov02 300

			subv va51 12
			doif tmvt va50 va51 <> 1
				targ ownr
				velo rand -3 3 rand -3 3
				subv ov01 1
				stop
			else
				mvto va50 va51
				setv vely 0
				targ ownr
			endi
		endi
	retn
endm

*Nymph drop script
scrp 2 13 5 5
	perm 30
	accg 2
endm

*Nymph timer script
scrp 2 13 5 9

	addv ov01 1
	subv ov02 1

	doif perm = 99
		doif rtyp grap posl post = 8 and rtyp grap posr post = 8 and rtyp grap posl posb = 8 and rtyp grap posr posb = 8
			perm 100
			accg 1
		endi
	endi











	doif carr = null
		doif rtyp room ownr <> 8 and rtyp room ownr <> 9 and ov00 < 3
			subv ov02 50
			gsub ani_
			doif ov02 > 0
				stop
			endi
		endi
	endi


	doif ov02 <= 0
		setv ov00 99
	endi

	doif ov00 = 99
		gsub die_
	endi


	doif ov00 eq 5
		gsub cplt
		doif ov01 gt 50
			gsub dfly
		endi
		stop
	endi

	doif ov00 eq 3

		gsub cplt

		gsub goup

	endi

	doif ov00 eq 4
		gsub morf
	endi

	doif ov02 lt ov73 and ov00 < 2
		setv ov00 1
	endi

	doif ov01 gt 30
		setv ov00 2

	endi

	doif ov00 eq 2
		gsub gplt
		stop
	endi

	doif ov00 eq 1
		gsub gfod
	endi

	doif ov00 eq 0
		gsub roam
	endi

	subr die_
		setv va50 posl
		setv va51 post
		setv va52 ov10
		new: simp 2 10 10 "dragonfly" 10 80 2000
		accg 3
		aero 10
		elas 1
		tick 20
		attr 195
		setv ov01 0
		setv ov61 12
		setv ov10 va52
		doif tmvt va50 va51 <> 1
			kill targ
			kill ownr
		else
			mvto va50 va51
			setv vely 0





		endi
		targ ownr
		kill targ
	retn


	subr gfod
		setv va47 2
		setv va48 6
		setv va49 0
		doif ov16 = null
			gsub find
		endi
		targ ov16
		doif targ <> null
			targ ownr
			gsub hunt
			doif touc ownr ov16 <> 0
				doif avar ov16 99 = 1
					mesg writ ov16 12
					addv ov02 ov72
				else
					setv ov00 0
					stop
				endi
				doif ov02 gt ov74
					setv ov00 0
				endi

			endi
		else
			targ ownr
			setv ov00 0
			gsub roam
			stop
		endi
		targ ownr
		gsub vect
		gsub ani_
		gsub mov_
		stop
	retn
	subr gplt
		seta ov16 null
		setv ov11 0
		setv va47 2
		setv va48 4
		setv va49 0
		doif ov16 = null
			gsub find
		endi
		targ ov16
		doif targ ne null
			targ ownr
			gsub hunt
			doif touc ownr ov16 <> 0
				targ ov16
				setv va50 posx
				targ ownr
				setv ov00 3
			endi
		else
			targ ownr
			setv ov00 0
		endi
		targ ownr
		gsub vect
		gsub ani_
		gsub mov_
		stop
	retn

	subr goup
		inst



		perm 30
		doif ov16 <> null
			targ ov16
			setv va90 post
			setv va91 posb
			setv va92 plne
			addv va92 1
			setv va93 posx
			targ ownr
			plne va92
		endi
		slow
		setv va92 va91
		subv va92 va90
		doif va92 > 25
			addv va90 20
		endi
		accg 0
		doif posx < va93
			velo 1 -1
		elif posx > va93
			velo -1 -1
		else
			velo 0 -1
		endi
		setv ov11 -1
		doif post < va90
			setv ov00 4
		endi
		gsub vect
		gsub ani_
		velo 0 0
		stop

	retn

	subr morf
		anim []
		doif ov10 gt 0
			base 32
			anim [0 1 2 3]
			over
		endi
		doif ov10 lt 0
			base 37
			anim [0 1 2 3]
			over
		endi
		setv ov00 5
		stop
	retn

	subr cplt

		setv va90 0
		etch 2 4 0
			addv va90 1
		next

		etch 2 5 0
			addv va90 1
		next

		doif va90 lt 1
			setv ov00 0
			mesg wrt+ ownr 257 0 0 0

			stop
		endi
	retn

	subr dfly
		setv va50 posx
		setv va51 posy
		inst
		setv va66 0
		esee 2 15 8
			addv va66 1
		next
		doif va66 < 8
			new: simp 2 15 8 "dragonfly" 26 0 2000
			accg 0
			aero 30
			perm 50
			tick 4
			attr 195
			rnge 800
			bhvr 16
			setv ov00 0
			setv ov01 2000
			setv ov70 0
			setv ov06 rand 0 1
			seta ov16 null
			setv ov10 1
			setv ov11 -1
			setv ov61 50
			setv ov72 300
			setv ov73 250
			setv ov74 800
			setv ov02 800
			subv va50 20
			subv va51 20
			doif tmvt va50 va51 <> 1
				velo 0 -20
				wait 50
				kill targ
				stop
			else
				mvto va50 va51
				setv vely 0
			endi
		endi
		targ ownr
		kill targ
		slow
	retn

*Roam subroutine
	subr roam
		setv va66 rand 0 10

		doif va66 lt 5
			doif ov10 ne 0
				setv ov10 0
			else
				setv ov10 rand -1 1
			endi
		endi
		doif va66 gt 5
			setv ov11 rand -1 1
		endi

		gsub vect
		gsub ani_
		gsub mov_
		stop
	retn

	subr vect
		setv va10 rand 6 12
		setv va11 rand 8 10
	retn

	subr ani_
		doif ov00 ne 3
			doif ov10 eq 0
				loop
					setv ov10 rand -1 1
				untl ov10 ne 0
			endi

			doif ov10 lt 0
				base 0
				anim [0 1 2 3 4 5 6 7 255]
			endi

			doif ov10 gt 0
				base 8
				anim [0 1 2 3 4 5 6 7 255]
			endi
		endi

		doif ov00 eq 3
			doif ov10 gt 0
				base 16
				anim [0 1 2 3 4 5 6 255]
			endi

			doif ov10 lt 0
				base 24
				anim [0 1 2 3 4 5 6 255]
			endi
		endi

	retn

	subr mov_
		mulv va10 ov10
		mulv va11 ov11
		velo va10 va11

	retn

*Find subroutine
	subr find
		setv va99 99999999
		seta va58 null
		inst
		esee va47 va48 va49
			setv va88 0
			setv va50 relx ownr targ
			setv va51 rely ownr targ
			doif va50 lt 0
				negv va50
			endi
			doif va51 lt 0
				negv va51
			endi
			setv va52 va50
			mulv va52 va52
			setv va53 va51
			mulv va53 va53
			setv va54 va52
			addv va54 va53
			doif va54 lt va99
				seta va58 targ
				setv va99 va54
			endi
		next
		slow
		targ va58
		doif targ <> null
			targ ownr
			seta ov16 va58
		else
			targ ownr
			seta ov16 null
		endi
		targ ownr
		slow
	retn

	subr hunt
		inst
		targ ov16
		doif targ <> null
			setv va50 posx
			setv va51 posy
			targ ownr
			doif posx lt va50
				setv ov10 1
			endi
			doif posx gt va50
				setv ov10 -1
			endi
			doif posy lt va51
				setv ov11 1
			endi
			doif posy gt va51
				setv ov11 -1
			endi
		else
			targ ownr
			setv ov00 0
			seta ov16 null
			stop
		endi
	retn



endm

*Dead dragonfly nymph timer script
scrp 2 10 10 9
	elas 1
	fric 80
	addv ov01 1
	anim []
	accg 3
	doif carr = null
		doif ov10 le 0
			base 0
			pose 0
			doif ov01 gt 50
				base 0
				anim [0 1 2 3]
				doif room targ <> -1 and carr = null
					altr room targ 3 0.1
					altr room targ 4 0.1
				endi
				over
				kill targ
			endi

		endi
		doif ov10 gt 0
			base 0
			pose 5
			doif ov01 gt 50
				base 0
				anim [5 6 7 8]
				doif room targ <> -1 and carr = null
					altr room targ 3 0.1
					altr room targ 4 0.1
				endi
				over
				kill targ
			endi
		endi
	endi
endm

*Egg eat script
scrp 2 13 5 12
	stim writ from 80 1
	kill ownr
endm

*Dragonfly eat script
scrp 2 15 8 12
	stim writ from 80 2
	kill ownr

endm

*Remove scripts
rscr

enum 2 13 5
	kill targ
next
scrx 2 13 5 9
scrx 2 13 5 257

enum 2 10 9
	kill targ
next
scrx 2 10 9 9


enum 2 15 8
	kill targ
next
scrx 2 15 8 9
scrx 2 15 8 5
scrx 2 15 8 6
scrx 2 15 8 256

enum 2 18 5
	kill targ
next
scrx 2 18 5 9

endm
