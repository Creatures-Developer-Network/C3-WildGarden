*GB Template
*# Pray-File "GB_handlefish.agent"
*# DS-Name "Handle Fish"
*# Depend graspit.c16
*# Attach gb_c3_conv2.c16

*# desc = "C3 Handle Fish raw, buggy, unsupported conversion."
*# Agent Animation File = "gb_c3_conv2.c16"
*# Agent Animation Gallery = "gb_c3_conv2"
*# Agent Sprite First Image = 6
*# GB_Category = 5
*# Agent Author = "Creature Labs"

new: simp 2 18 21 "graspit" 4 200 4000
BHVR 48
attr 199
clac -1
elas 50
accg 1
aero 7
perm 75
fric 99

seta va16 targ
setv ov61 30
emit 6 .25
tick 1
setv ov66 66
setv ov67 1



mvsf game "ch_x" game "ch_y"
velo rand -10 10 0

** Initial Age (zero)
setv ov01 0
** Initial Energy
setv ov02 550
** Fertility / Pregnancy Indicator (1 fertile, 2 pregnant)
setv ov04 0
** Life Stage (1 baby, 2 child, 3 youth, 4 adult, 5 elderly)
setv ov05 1
** ov71 is the species, ov75 is the genus: 13 8 is Aquamites, 3 6 is Orange
** Sponge Seed, 3 7 is Opal Sponge Seed and 3 8 is Gumin Grass seed.
** ov76 is an indicator of which one is currently selected. 1 = aquamites, 2 = orange sponge,
** 3 = opal sponge, 4 = gumin grass.
setv va51 rand 1 4
doif va51 = 1
	setv ov75 13
	setv ov71 8
	setv ov76 1
elif va51 = 2
	setv ov75 3
	setv ov71 6
	setv ov76 2
elif va51 = 3
	setv ov75 3
	setv ov71 7
	setv ov76 3
elif va51 = 4
	setv ov75 3
	setv ov71 8
	setv ov76 4
endi
** Relatively Fast Timer
tick 1


scrp 2 15 16 9
** 	Check you are in fact in water..
	gsub roomtype

** 	Age Slightly
	addv ov01 1

** 	Lose Energy from Generally Existing
	subv ov02 1

**	Die if too old or if marked for death
	doif ov99 = 5 or ov01 > 2000
		gsub death
	endi

** 	Life Stage Changes if the conditions are right..
	doif ov01 >= 200 and ov01 <= 400 and ov05 = 1 and rtyp room ownr = 9 and carr = null and obst left > 40 and obst rght > 40 and obst _up_ > 40 and obst down > 40
** 		Become a Child
		setv ov05 2
** 		Storing State for new Fish
		setv va00 ov00
** 		Storing Position for new Fish
		setv va50 posl
		setv va51 post
** 		Storing Age for new Fish
		setv va01 ov01
** 		Storing Energy for new Fish
		setv va02 ov02
**		Storing Fertilty / Pregnancy Indicator for new fish
		setv va04 ov04
** 		Storing Lifestage for new Fish
		setv va05 ov05
** 		Storing Current Food Type Genus for new Fish
		setv va75 ov75
** 		Storing Current Food Type Species for new Fish
		setv va71 ov71
** 		Storing Current Food Type Indicator for new Fish
		setv va76 ov76
** 		Storing Velocity and Direction Variables
		setv va10 ov10
		setv va11 ov11
		setv va12 ov12
		setv va13 ov13
** 		Creating New Fish
		inst
		new: simp 2 15 16 "graspit" 50 50 5000
		attr 199
		BHVR 48
		accg 0
		aero 1
		perm 100
		elas 20
		clac -1


**		Moving to old fish's position
		doif tmvt va50 va51 = 1
			mvto va50 va51
		else
			mvsf va50 va51
		endi
		emit 6 .15
** 		Transferring stored conditions to new fish
		setv ov00 va00
		setv ov01 va01
		setv ov02 va02
		setv ov04 va04
		setv ov05 va05
		setv ov75 va75
		setv ov71 va71
		setv ov76 va76
**		Transferring Direction and Velocity variables to new fish
		setv ov10 va10
		setv ov11 va11
		setv ov12 va12
		setv ov13 va13
		tick 1
		slow
		kill ownr
	elif ov01 >= 401 and ov01 <= 1000 and ov05 = 2 and rtyp room ownr = 9 and carr = null and obst left > 40 and obst rght > 40 and obst _up_ > 40 and obst down > 40
** 		Become a Youth
		setv ov05 3
** 		Storing State for new Fish
		setv va00 ov00
** 		Storing Position for new Fish
		setv va50 posl
		setv va51 post
** 		Storing Age for new Fish
		setv va01 ov01
** 		Storing Energy for new Fish
		setv va02 ov02
**		Storing Fertility / Pregnancy Indicator for new fish
		setv va04 ov04
** 		Storing Lifestage for new Fish
		setv va05 ov05
** 		Storing Current Food Type Genus for new Fish
		setv va75 ov75
** 		Storing Current Food Type Species for new Fish
		setv va71 ov71
** 		Storing Current Food Type Indicator for new Fish
		setv va76 ov76
** 		Storing Velocity and Direction Variables
		setv va10 ov10
		setv va11 ov11
		setv va12 ov12
		setv va13 ov13
**		Transferring Direction and Velocity variables to new fish
		setv ov10 va10
		setv ov11 va11
		setv ov12 va12
		setv ov13 va13
** 		Creating New Fish
		inst
		new: simp 2 15 16 "graspit" 50 100 5000
		attr 199
		BHVR 48
		accg 0
		aero 1
		perm 100
		elas 20
		clac -1


**		Moving to old fish's position
		doif tmvt va50 va51 = 1
			mvto va50 va51
		else
			mvsf va50 va51
		endi
		emit 6 .15
** 		Transferring stored conditions to new fish
		setv ov00 va00
		setv ov01 va01
		setv ov02 va02
		setv ov04 va04
		setv ov05 va05
		setv ov75 va75
		setv ov71 va71
		setv ov76 va76
**		Transferring Direction and Velocity variables to new fish
		setv ov10 va10
		setv ov11 va11
		setv ov12 va12
		setv ov13 va13
		tick 1
		slow
		kill ownr
	elif ov01 >= 1001 and ov01 <= 1800 and ov05 = 3 and rtyp room ownr = 9 and carr = null and obst left > 40 and obst rght > 40 and obst _up_ > 40 and obst down > 40
** 	Become an Adult
		setv ov05 4
** 		Storing State for new Fish
		setv va00 ov00
** 		Storing Position for new Fish
		setv va50 posl
		setv va51 post
** 		Storing Age for new Fish
		setv va01 ov01
** 		Storing Energy for new Fish
		setv va02 ov02
**		Storing Fertilty / Pregnancy Indicator for new fish
		setv va04 ov04
** 		Storing Lifestage for new Fish
		setv va05 ov05
** 		Storing Current Food Type Genus for new Fish
		setv va75 ov75
** 		Storing Current Food Type Species for new Fish
		setv va71 ov71
** 		Storing Current Food Type Indicator for new Fish
		setv va76 ov76
** 		Storing Velocity and Direction Variables
		setv va10 ov10
		setv va11 ov11
		setv va12 ov12
		setv va13 ov13
** 		Creating New Fish
		inst
		new: simp 2 15 16 "graspit" 50 150 5000
		attr 199
		BHVR 48
		accg 0
		aero 1
		perm 100
		elas 20
		clac -1


**		Moving to old fish's position
		doif tmvt va50 va51 = 1
			mvto va50 va51
		else
			mvsf va50 va51
		endi
		emit 6 .15
** 		Transferring stored conditions to new fish
		setv ov00 va00
		setv ov01 va01
		setv ov02 va02
		setv ov04 va04
		setv ov05 va05
		setv ov75 va75
		setv ov71 va71
		setv ov76 va76
**		Transferring Direction and Velocity variables to new fish
		setv ov10 va10
		setv ov11 va11
		setv ov12 va12
		setv ov13 va13
		tick 1
		slow
		kill ownr
	elif ov01 >= 1801 and ov05 = 4
** 	Become Elderly
		setv ov05 5
	endi

**	Change State depending on conditions!
** 	States Include: 1 flocking, 2 random swimming, 3 hungry & hunting food, 4 full and front swimming
	doif ov02 < 500
		setv ov00 3


	else
		setv ov00 1
	endi

** Become Fertile when adult
	doif ov05 = 4 and ov04 <> 1 and ov04 <> 2
		addv ov70 1
		doif ov70 >= 50
			setv ov04 1

		endi
	endi

** Try to mate if you (and another fish) are fertile.
	doif ov04 = 1
		gsub mate
	endi

** Give birth if pregnant
	doif ov04 = 2
		gsub eggs
	endi










**	Depending on State, do certain things!
	doif ov00 = 1
		doif ov05 = 4
			gsub flocking
		else
			gsub random
		endi
		gsub avoidance
		gsub swimanim
		gsub movement
	elif ov00 = 2
		gsub random
		gsub avoidance
		gsub swimanim
		gsub movement
	elif ov00 = 3
		gsub hunting
		gsub avoidance
		gsub swimanim
		gsub movement
		gsub eating
	elif ov00 = 4
		gsub frontswim
		doif ov05 = 4
			gsub flocking
		else
			gsub random
		endi
		gsub avoidance
		gsub swimanim
		gsub movement
		gsub eating
	endi

** Mating - if the partner is able!
	subr mate
		rnge 50
		inst
		esee 2 15 16
			doif targ <> null
				doif ov04 = 1
					setv ov04 2
					setv va04 2
				endi
			endi
		next
		slow
		doif va04 = 2
			setv ov04 2
		endi
	retn
	subr eggs
** Check how many adults are around, don't want to overcrowd!
		setv va34 0
		rnge 1000
		esee 2 15 16
			addv va34 1
		next
** Also check how many other eggs are around.
		rnge 1000
		esee 2 18 21
			addv va34 1
		next
		mulv va34 1.5
		doif va34 < 14
			setv ov08 rand 1 3
		elif va34 > 16
			gsub death
			stop
		endi
** If you are going to make some eggs, make them.
		doif ov08 <> 0
			setv va80 posl
			setv va81 post
			reps ov08
				new: simp 2 18 21 "graspit" 4 200 4000
				BHVR 48
				attr 199
				clac -1
				elas 50
				accg 1
				aero 7
				perm 75
				fric 99

				seta va16 targ
				setv ov61 30
				doif tmvt va80 va81 = 1
					mvto va80 va81
					emit 6 .25
					tick 10
				else
					targ va16
					kill targ
				endi
			repe



		else
			targ ownr
			gsub death
			stop
		endi
		targ ownr
	retn

** If not carried, die or be marked for death.
	subr death
		doif carr = null
			setv va00 posl
			setv va01 post
			doif rtyp room ownr = 9
				setv va60 0
				setv va70 208
			elif rtyp room ownr <> 9
				setv va60 1
				setv va70 209
			endi
			doif ov05 = 5
				setv ov05 4
			endi


** Create Fading Fish Detritus (fish has died rather than been consumed)
			doif ov05 = 1
				doif ov10 < 0
					inst
					new: simp 2 10 41 "dead_fish" 3 77 1000
					attr va70
					perm 99
					accg va60
					elas 15
					aero 1
					fric 100
					seta va16 targ
					doif tmvt va00 va01 = 1
						mvto va00 va01
						setv ov77 5
						velo -1 0
						tick 10
						kill ownr
					else
						targ va16
						kill targ
						kill ownr
					endi
					slow
				elif ov10 > 0
					inst
					new: simp 2 10 41 "dead_fish" 3 74 1000
					attr va70
					perm 99
					accg va60
					elas 15
					aero 10
					fric 100
					seta va16 targ
					doif tmvt va00 va01 = 1
						mvto va00 va01
						setv ov77 5
						velo 1 0
						tick 10
						kill ownr
					else
						targ va16
						kill targ
						kill ownr
					endi
					slow
				endi
** 					Or this if child
			elif ov05 = 2
				doif ov10 < 0
					inst
					new: simp 2 10 41 "dead_fish" 3 71 1000
					attr va70
					perm 99
					accg va60
					elas 15
					aero 10
					fric 100
					seta va16 targ
					doif tmvt va00 va01 = 1
						mvto va00 va01
						setv ov77 5
						velo -1 0
						tick 10
						kill ownr
					else
						targ va16
						kill targ
						kill ownr
					endi

					slow
				elif ov10 > 0
					inst
					new: simp 2 10 41 "dead_fish" 3 68 1000
					attr va70
					perm 99
					accg va60
					elas 15
					aero 10
					fric 100
					seta va16 targ
					doif tmvt va00 va01 = 1
						mvto va00 va01
						setv ov77 5
						velo 1 0
						tick 10
						kill ownr
					else
						targ va16
						kill targ
						kill ownr
					endi

					slow
				endi
** 					Or this if adult
			elif ov05 = 3
				doif ov10 < 0
					inst
					new: simp 2 10 41 "dead_fish" 3 65 1000
					attr va70
					perm 99
					accg va60
					elas 15
					aero 10
					fric 100
					seta va16 targ
					doif tmvt va00 va01 = 1
						mvto va00 va01
						setv ov77 5
						velo -1 0
						tick 10
						kill ownr
					else
						targ va16
						kill targ
						kill ownr
					endi

					slow
				elif ov10 > 0
					inst
					new: simp 2 10 41 "dead_fish" 3 62 1000
					attr va70
					perm 99
					accg va60
					elas 15
					aero 10
					fric 100
					seta va16 targ
					doif tmvt va00 va01 = 1
						mvto va00 va01
						setv ov77 5
						velo 1 0
						tick 10
						kill ownr
					else
						targ va16
						kill targ
						kill ownr
					endi

					slow
				endi
			elif ov05 = 4
				doif ov10 < 0
					inst
					new: simp 2 10 41 "dead_fish" 3 59 1000
					attr va70
					perm 99
					accg va60
					elas 15
					aero 10
					fric 100
					seta va16 targ
					doif tmvt va00 va01 = 1
						mvto va00 va01
						setv ov77 5
						velo -1 0
						tick 10
						kill ownr
					else
						targ va16
						kill targ
						kill ownr
					endi

					slow
				elif ov10 > 0
					inst
					new: simp 2 10 41 "dead_fish" 3 56 1000
					attr va70
					perm 99
					accg va60
					elas 15
					aero 10
					fric 100
					seta va16 targ
					doif tmvt va00 va01 = 1
						mvto va00 va01
						setv ov77 5
						velo 1 0
						tick 10
						kill ownr
					else
						targ va16
						kill targ
						kill ownr
					endi

					slow
				endi

			endi
		elif carr <> null and carr = pntr
			setv ov99 5
		elif carr <> null and carr <> pntr
			targ ownr
			kill targ
		endi
	retn



** Food hunting subroutine. 
	subr hunting

		setv va60 0
		loop
			addv va60 1
			setv va50 0
			setv va51 0
			setv va52 0
			setv va53 0

			inst
			rnge 1000
			esee 2 ov75 ov71
				setv va53 0
				doif targ <> null
					setv va53 1
					setv va50 relx ownr targ
					addv va51 va50
					setv va50 0
					setv va50 rely ownr targ
					addv va52 va50
					setv va50 0
				endi
			next
			slow
			doif va53 = 0

				setv va76 ov76
				loop
					setv va00 rand 1 4
					setv va51 rand 1 4
					doif va51 = 1
						setv ov75 13
						setv ov71 8
						setv ov76 1
					elif va51 = 2
						setv ov75 3
						setv ov71 6
						setv ov76 2
					elif va51 = 3
						setv ov75 3
						setv ov71 7
						setv ov76 3
					elif va51 = 4
						setv ov75 3
						setv ov71 8
						setv ov76 4
					endi
				untl ov76 <> va76
			endi
		untl va53 = 1 or va60 = 7
		doif va53 = 1





			divv va51 va53
			divv va52 va53
			doif va51 < 0 and ov10 = -1
				setv ov12 rand -2 -1
			elif va51 < 0 and ov10 = 1
				velo 0 0
				gsub rightstartturn
				gsub leftstartturnreversed
				setv ov10 -1
				setv ov12 rand -2 -1
			elif va51 > 0 and ov10 = -1
				velo 0 0
				gsub leftstartturn
				gsub rightstartturnreversed
				setv ov10 1
				setv ov12 rand 1 2
			elif va51 > 0 and ov10 = 1
				setv ov12 rand 1 2
			endi
			doif va52 < 0
				setv ov13 rand -2 -1
			elif va52 > 0
				setv ov13 rand 1 2
			endi
		else

			gsub random
		endi
	retn

** Eating nearby food.
	subr eating

		setv va44 0
		setv va55 0
		rnge 50
		inst
		esee 2 ov75 ov71
			doif targ <> null
				addv va44 1
				doif va44 >= 1
					setv va55 1
					kill targ
				endi
			endi
		next
		slow
		doif va55 = 1
			addv ov02 7500











		endi
	retn

** Room Monitor, stops the little darlings from flying!
	subr roomtype

		doif rtyp room ownr <> 9
			loop
				addv ov86 1
				doif ov86 >= 0 and ov86 <= 6
					addv ov87 .03
				elif ov86 > 6 and ov86 < 100
					addv ov87 .08
				endi
				accg ov87
			untl rtyp room ownr = 9 or ov86 >= 100
			doif ov86 >= 100
				gsub death
			endi
		endi
		doif rtyp room ownr = 9
			setv ov86 0
			setv ov87 0
		endi
		accg ov87
	retn

** Flock swimming, or if nobody is nearby - swim randomly!
	subr flocking

		setv va50 0
		setv va51 0
		setv va52 0
		setv va53 1
		rnge 200
		inst
		esee 2 15 16
			doif targ <> null
				addv va53 1
				setv va50 relx ownr targ
				addv va51 va50
				setv va50 0
				setv va50 rely ownr targ
				addv va52 va50
				setv va50 0
			endi
		next
		slow
		doif va53 > 1
			divv va51 va53
			divv va52 va53
			doif va51 < 0 and ov10 = -1
				setv ov12 rand -2 -1
			elif va51 < 0 and ov10 = 1
				gsub rightstartturn
				gsub leftstartturnreversed
				setv ov10 -1
				setv ov12 rand -2 -1
			elif va51 > 0 and ov10 = -1
				gsub leftstartturn
				gsub rightstartturnreversed
				setv ov10 1
				setv ov12 rand 1 2
			elif va51 > 0 and ov10 = 1
				setv ov12 rand 1 2
			endi
			doif va52 < 0
				setv ov13 rand -2 -1
			elif va52 > 0
				setv ov13 rand 1 2
			endi
		else
			gsub random
		endi
	retn

** Movement - simply that.
	subr movement



		velo ov12 ov13
	retn

** Random Swimming!
	subr random

		setv va64 rand 1 10
		doif va64 = 6 and ov10 = 1
			velo 0 0
			setv ov10 -1
			gsub rightstartturn
			gsub leftstartturnreversed
			setv ov12 rand -2 -1
		elif va64 = 6 and ov10 = -1
			velo 0 0
			setv ov10 1
			gsub leftstartturn
			gsub rightstartturnreversed
			setv ov12 rand 1 2
		endi
		setv va64 rand 1 10
		doif va64 = 7 and ov11 = 1
			setv ov13 rand -1 0
			setv ov11 -1
		elif va64 = 7 and ov11 = -1
			setv ov13 rand 0 1
			setv ov11 1
		endi
	retn

** Obstacle checker, stops the little darlings from getting bruises!
	subr avoidance

		doif obst rght < 45 and ov10 <> -1
			velo 0 0
			setv ov10 -1
			gsub rightstartturn
			gsub leftstartturnreversed
			setv ov12 rand -4 -1
		elif obst left < 45 and ov10 <> 1
			velo 0 0
			setv ov10 1
			gsub leftstartturn
			gsub rightstartturnreversed
			setv ov12 rand 1 4
		endi
		doif obst _up_ < 45 and ov11 <> 1
			velo 0 0
			setv ov11 1
			setv ov13 rand 1 2
		elif obst down < 45 and ov11 <> -1
			velo 0 0
			setv ov11 -1
			setv ov13 rand -2 -1
		endi
	retn

** Left start turn.
	subr leftstartturn

		base 30
		anim [9 8 7 6 5 4 3 2 1 0]
		over
	retn

** Right start turn.
	subr rightstartturn

		base 10
		anim [0 1 2 3 4 5 6 7 8 9]
		over
	retn

** Left start turn reversed.
	subr leftstartturnreversed

		base 30
		anim [0 1 2 3 4 5 6 7 8 9]
		over
	retn

** Right start turn reversed.
	subr rightstartturnreversed

		base 10
		anim [9 8 7 6 5 4 3 2 1 0]
		over
	retn

** Front swimming.
	subr frontswim

		base 20
		anim [0 1 2 3 4 5 6 7 8 9]
		velo 0 0
		velo -1 1
		velo 1 -1
		velo 0 -1
		velo 0 1
		velo 1 0
		velo -1 0
		velo 0 0
	retn

** Left or Right facing swimming.
	subr swimanim

		doif ov10 = 1
			base 0
			anim [0 1 2 3 4 5 6 7 8 9 255]
		elif ov10 = -1
			base 40
			anim [0 1 2 3 4 5 6 7 8 9 255]
		endi

	retn
endm

** Handle Fish Egg's Timer
scrp 2 18 21 9
** Room Monitor.
	gsub room

	doif ov66 = 66
		gsub htch
	endi

** ov80 = 0: Drift till you have an obstacle below you
** ov80 = 1: You've hit the ground, so hatch.
	doif ov80 = 0
		gsub drft
	elif ov80 = 1
		gsub htch
	endi

** Die if you are marked for death.	
	doif ov99 = 5
		gsub deth
	endi

** Change drifting direction randomly.
	subr drft
		setv va70 rand 0 10
		doif va70 = 1
			setv ov11 -1
		elif va70 = 2
			setv ov11 1
		elif va70 = 3
			setv ov10 -1
		elif va70 = 4
			setv ov10 1
		endi
		gsub obst
		gsub anim
		gsub move
	retn
** Check if there are any obstacles around, if there is
** one below you then drop.
	subr obst
		doif obst 0 < 50
			setv ov10 1
		endi
		doif obst 1 < 50
			setv ov10 -1
		endi
		doif obst 2 < 50
			setv ov11 1
		endi
		doif obst 3 < 20
			accg 5
			setv ov80 1
		endi
	retn

** Animation of turning randomly.
	subr anim
		setv va44 rand 1 3
		doif va44 = 1
			anim [0 1 2 3 255]
		elif va44 = 2
			anim [2 1 0 3 255]
		elif va44 = 3
			anim [1 3 0 2 255]
		endi
	retn
	subr move
		velo ov10 ov11
	retn

** Room Monitor, stops the little darlings from flying!
	subr room
		doif rtyp room ownr <> 9
			elas 50
			loop
				addv ov86 1
				doif ov86 >= 0 and ov86 <= 6
					addv ov87 .03
				elif ov86 > 6 and ov86 < 100
					addv ov87 .08
				endi
				accg ov87
			untl rtyp room ownr = 9 or ov86 >= 100
			doif ov86 >= 100
				gsub deth
			endi
		endi
		doif rtyp room ownr = 9
			elas 0
			setv ov86 0
			setv ov87 1
		endi
		accg ov87
	retn


** If not carried, die or be marked for death.
** Don't think this is being called at the moment.
	subr deth
		inst
		doif carr = null

			targ ownr
			kill targ
		elif carr <> null
			setv ov99 5
		endi
		slow
	retn

	subr htch
		doif ov66 = 66
			wait 200
			setv ov66 0
		endi
		doif ov67 = 0
			setv va60 0
			doif ov60 = 0
				setv ov60 rand 15000 20000
			endi
			wait ov60
			loop
				addv va60 1
				velo rand -5 5 rand 0 -5
				gsub anim
				wait 10
			untl va60 = 100
			setv ov67 1
		endi
		inst
		doif carr = null
			setv va90 posl
			setv va91 post
			new: simp 2 15 16 "graspit" 50 0 5000
			attr 199
			accg 0
			aero 1
			perm 100
			elas 20
			clac -1
			doif tmvt va90 va91 = 1
				mvto va90 va91
			else
				mvsf va90 va91
			endi
			emit 6 .15
** Initial Age (zero)
			setv ov01 0
** Initial Energy
			setv ov02 550
** Fertility / Pregnancy Indicator (1 fertile, 2 pregnant)
			setv ov04 0
** Life Stage (1 baby, 2 child, 3 youth, 4 adult, 5 elderly)
			setv ov05 1
** ov71 is the species, ov75 is the genus: 13 8 is Aquamites, 3 6 is Orange
** Sponge Seed, 3 7 is Opal Sponge Seed and 3 8 is Gumin Grass seed.
** ov76 is an indicator of which one is currently selected. 1 = aquamites, 2 = orange sponge,
** 3 = opal sponge, 4 = gumin grass.
			setv va51 rand 1 4
			doif va51 = 1
				setv ov75 13
				setv ov71 8
				setv ov76 1
			elif va51 = 2
				setv ov75 3
				setv ov71 6
				setv ov76 2
			elif va51 = 3
				setv ov75 3
				setv ov71 7
				setv ov76 3
			elif va51 = 4
				setv ov75 3
				setv ov71 8
				setv ov76 4
			endi
** Relatively Fast Timer
			tick 1
			kill ownr
			stop
		else
			setv ov66 66
		endi
		slow
	retn
endm
** Fish Eat Script
scrp 2 15 16 12
	stim writ from 80 1
	targ ownr
	setv va00 posl
	setv va01 post
	doif rtyp room ownr = 9
		setv va60 0
		setv va70 208
	elif rtyp room ownr <> 9
		setv va60 1
		setv va70 209
	endi
** 					Do this if baby
	doif ov05 = 1
		doif ov10 < 0
			inst
			new: simp 2 10 41 "dead_fish" 4 108 1000
			attr va70
			perm 99
			accg va60
			elas 15
			aero 10
			fric 100
			seta va16 targ
			doif tmvt va00 va01 = 1
				mvto va00 va01
				setv ov77 8
				tick 10
				kill ownr
			else
				targ va16
				kill targ
				kill ownr
			endi
			slow
		elif ov10 > 0
			inst
			new: simp 2 10 41 "dead_fish" 4 104 1000
			attr va70
			perm 99
			accg va60
			elas 15
			aero 10
			fric 100
			seta va16 targ
			doif tmvt va00 va01 = 1
				mvto va00 va01
				setv ov77 8
				tick 10
				kill ownr
			else
				targ va16
				kill targ
				kill ownr
			endi
			slow
		endi
** 					Or this if child
	elif ov05 = 2
		doif ov10 < 0
			inst
			new: simp 2 10 41 "dead_fish" 4 100 1000
			attr va70
			perm 99
			accg va60
			elas 15
			aero 10
			fric 100
			seta va16 targ
			doif tmvt va00 va01 = 1
				mvto va00 va01
				setv ov77 8
				tick 10
				kill ownr
			else
				targ va16
				kill targ
				kill ownr
			endi
			slow
		elif ov10 > 0
			inst
			new: simp 2 10 41 "dead_fish" 4 96 1000
			attr va70
			perm 99
			accg va60
			elas 15
			aero 10
			fric 100
			seta va16 targ
			doif tmvt va00 va01 = 1
				mvto va00 va01
				setv ov77 8
				tick 10
				kill ownr
			else
				targ va16
				kill targ
				kill ownr
			endi
			slow
		endi
** 					Or this if adult
	elif ov05 = 3
		doif ov10 < 0
			inst
			new: simp 2 10 41 "dead_fish" 4 92 1000
			attr va70
			perm 99
			accg va60
			elas 15
			aero 10
			fric 100
			seta va16 targ
			doif tmvt va00 va01 = 1
				mvto va00 va01
				setv ov77 8
				tick 10
				kill ownr
			else
				targ va16
				kill targ
				kill ownr
			endi
			slow
		elif ov10 > 0
			inst
			new: simp 2 10 41 "dead_fish" 4 88 1000
			attr va70
			perm 99
			accg va60
			elas 15
			aero 10
			fric 100
			seta va16 targ
			doif tmvt va00 va01 = 1
				mvto va00 va01
				setv ov77 8
				tick 10
				kill ownr
			else
				targ va16
				kill targ
				kill ownr
			endi
			slow
		endi
	elif ov05 = 4
		doif ov10 < 0
			inst
			new: simp 2 10 41 "dead_fish" 4 84 1000
			attr va70
			perm 99
			accg va60
			elas 15
			aero 10
			fric 100
			seta va16 targ
			doif tmvt va00 va01 = 1
				mvto va00 va01
				setv ov77 8
				tick 10
				kill ownr
			else
				targ va16
				kill targ
				kill ownr
			endi
			slow
		elif ov10 > 0
			inst
			new: simp 2 10 41 "dead_fish" 4 80 1000
			attr va70
			perm 99
			accg va60
			elas 15
			aero 10
			fric 100
			seta va16 targ
			doif tmvt va00 va01 = 1
				mvto va00 va01
				setv ov77 8
				tick 10
				kill ownr
			else
				targ va16
				kill targ
				kill ownr
			endi
			slow
		endi
	endi

endm
** Fish Detritus Timer
scrp 2 10 41 9
	doif ov77 = 5
		wait 100
		pose 1
		wait 100
		pose 2
		wait 100
		kill ownr
	elif ov77 = 8
		wait 100
		pose 1
		wait 100
		pose 2
		wait 100
		pose 3
		wait 100
		kill ownr
	endi
endm
** Egg Eat Script
scrp 2 18 21 12
	stim writ from 80 1
	kill ownr
endm


rscr
enum 2 15 16
	kill targ
next
enum 2 18 21
	kill targ
next
enum 2 10 41
	kill targ
next
scrx 2 15 16 9
scrx 2 18 21 9
scrx 2 10 41 9
scrx 2 15 16 12
scrx 2 18 21 12
