*GB Template
*# Pray-File "GB_Neonfish.agent"
*# DS-Name "Neon Fish"
*# Depend neon.c16
*# Attach gb_c3_conv2.c16

*# desc = "C3 Neon Fish raw, buggy, unsupported conversion."
*# Agent Animation File = "gb_c3_conv2.c16"
*# Agent Animation Gallery = "gb_c3_conv2"
*# Agent Sprite First Image = 11
*# GB_Category = 5
*# Agent Author = "Creature Labs"

new: simp 2 15 19 "neon" 188 0 4100
attr 199

clac -1
elas 20
aero 1
accg 0
perm 100

*OV01 is age (rises each timer script)
setv ov01 0
*OV02 is energy (lowers each timer script)
setv ov02 550
*OV05 is life stage
setv ov05 0
*OV16 is current target
seta ov16 null

mvsf game "ch_x" game "ch_y"

*Choosing what to hunt - ov71 is the species, ov75 is the genus: 13 8 is aquamites, 3 6 is Orange Sponge Seed, 37 is Opal sponge Seed and 3 8 is gumin grass seed.
*OV76 is an indicator if which is currently selected - 1 = aquamites, 2 = orange sponge, 3 = opal sponge, 4 = gumin grass.
setv va51 rand 1 4
doif va51 = 1
	setv ov75 13
	setv ov71 8
	setv ov76 1
elif va51 = 2
	setv ov75 3
	setv ov71 6
	setv ov76 2
elif va51 = 3
	setv ov75 3
	setv ov71 7
	setv ov76 3
elif va51 = 4
	setv ov75 3
	setv ov71 8
	setv ov76 4
endi


*Pose bases
setv ov30 0
setv ov31 10
setv ov32 20
setv ov33 30
setv ov34 41
*initial poses
setv ov61 50
setv ov73 0

** ov74 is basically a timer to stop them breeding too quickly when they become adults
setv ov74 0
setv va50 rand 0 1
doif va50 = 0
	setv ov10 -1
	pose 0
elif va50 = 1
	setv ov10 1
	pose 30
endi
velo 0 0
tick 2

*Fish egg timer script
scrp 2 18 17 9
**Room monitor
	gsub room

	doif ov66 = 66
		gsub htch
	endi

** ov80 = 0: Drift till you have an obstacle below you
** ov80 = 1: You've hit the ground, so hatch.
	doif ov80 = 0
		gsub drft
	elif ov80 = 1
		gsub htch
	endi

** Die if you are marked for death.	
	doif ov99 = 5
		gsub deth
	endi

** Change drifting direction randomly.
	subr drft
		setv va70 rand 0 10
		doif va70 = 1
			setv ov11 -1
		elif va70 = 2
			setv ov11 1
		elif va70 = 3
			setv ov10 -1
		elif va70 = 4
			setv ov10 1
		endi
		gsub obst
		gsub anim
		gsub move
	retn

** Check if there are any obstacles around, if there is one below you then drop.
	subr obst
		doif obst 0 < 50
			setv ov10 1
		endi
		doif obst 1 < 50
			setv ov10 -1
		endi
		doif obst 2 < 50
			setv ov11 1
		endi
		doif obst 3 < 20
			accg 5
			setv ov80 1
		endi
	retn

** Animation of turning randomly.
	subr anim
		setv va44 rand 1 3
		doif va44 = 1
			anim [0 1 2 3 255]
		elif va44 = 2
			anim [2 1 0 3 255]
		elif va44 = 3
			anim [1 3 0 2 255]
		endi
	retn
*Velocity
	subr move
		velo ov10 ov11
	retn

** Room Monitor, stops the little darlings from flying!
	subr room
		doif rtyp room ownr <> 9
			elas 50
			loop
				addv ov86 1
				doif ov86 >= 0 and ov86 <= 6
					addv ov87 .03
				elif ov86 > 6 and ov86 < 100
					addv ov87 .08
				endi
				accg ov87
			untl rtyp room ownr = 9 or ov86 >= 100
			doif ov86 >= 100
				gsub deth
			endi
		endi
		doif rtyp room ownr = 9
			elas 0
			setv ov86 0
			setv ov87 1
		endi
		accg ov87
	retn


** If not carried, die or be marked for death.
	subr deth
		inst
		doif carr = null

			targ ownr
			kill targ
		elif carr <> null
			setv ov99 5
		endi
		slow
	retn

	subr htch
		doif ov67 = 0
			setv va90 0
			doif ov60 = 0
				setv ov60 rand 15000 20000
			endi
			wait ov60
			loop
				addv va90 1
				velo rand -3 3 rand -1 -5
				gsub anim
				wait 10
			untl va90 = 25
			setv ov67 1
		endi
		doif carr = null
			setv va90 posl
			setv va91 post
			inst
			new: simp 2 15 19 "neon" 188 0 4100
			attr 199

			clac -1
			elas 20
			aero 1
			accg 0
			perm 100
			doif tmvt va90 va91 = 1
				mvto va90 va91
			else
				mvsf va90 va91
			endi

			setv ov01 0

			setv ov02 550
			setv ov05 0
			seta ov16 null





			setv va51 rand 1 4
			doif va51 = 1
				setv ov75 13
				setv ov71 8
				setv ov76 1
			elif va51 = 2
				setv ov75 3
				setv ov71 6
				setv ov76 2
			elif va51 = 3
				setv ov75 3
				setv ov71 7
				setv ov76 3
			elif va51 = 4
				setv ov75 3
				setv ov71 8
				setv ov76 4
			endi



			setv ov30 0
			setv ov31 10
			setv ov32 20
			setv ov33 30
			setv ov34 41

			setv ov61 50
			setv ov73 0


			setv ov74 0
			setv va50 rand 0 1
			doif va50 = 0
				setv ov10 -1
				pose 0
			elif va50 = 1
				setv ov10 1
				pose 30
			endi
			velo 0 0
			tick 2
			slow
			kill ownr
		else
			setv ov66 66
		endi
	retn
endm

*Fish eat script
scrp 2 15 19 12

	stim writ from 80 1
	kill ownr
endm


*Fish timer script
scrp 2 15 19 9
*Check current room
	gsub room

*If marked for death, die.
	doif ov99 = 5

		gsub deth
	endi

*If too old, die
	doif ov01 >= 1500

		gsub deth
	endi

*Give birth if pregnant
	doif ov70 = 1
		gsub eggs
		setv ov70 0

		gsub deth
	endi


*Age slightly
	addv ov01 2


*Use up energy
	subv ov02 3

** If not full, eat any nearby food. 
	doif ov02 < 2500
		gsub eat_


	endi


** Mating / Breeding.
	doif ov05 = 2 and ov72 = 0
		addv ov74 1
		doif ov74 >= 64
			gsub mate
		endi
	endi


** Age and change pose bases, put in an inst to stop bounding box errors.
	doif ov73 = 0 and ov01 >= 100 and ov01 <= 200 and obst left > 40 and obst rght > 40 and obst _up_ > 40 and obst down > 40 and rtyp room ownr = 9

		velo 0 0
		setv ov05 1
		setv ov73 1
		setv ov30 47
		setv ov31 57
		setv ov32 67
		setv ov33 75
		setv ov34 82
		doif ov10 < 0
			gsub lstn
			gsub ftsw
			gsub rstr
			setv ov10 1
		elif ov10 > 0
			gsub rstn
			gsub lstr
			setv ov10 -1
		endi
		gsub swim
	elif ov73 = 1 and ov01 >= 201 and ov01 <= 400 and obst left > 40 and obst rght > 40 and obst _up_ > 40 and obst down > 40 and rtyp room ownr = 9

		velo 0 0
		setv ov05 1
		setv ov73 2
		setv ov30 94
		setv ov31 104
		setv ov32 114
		setv ov33 122
		setv ov34 129
		doif ov10 < 0
			gsub lstn
			gsub ftsw
			gsub rstr
			setv ov10 1
		elif ov10 > 0
			gsub rstn
			gsub lstr
			setv ov10 -1
		endi
		gsub swim
	elif ov73 = 2 and ov01 >= 401 and obst left > 40 and obst rght > 40 and obst _up_ > 40 and obst down > 40 and rtyp room ownr = 9

		velo 0 0
		setv ov05 2
		setv ov73 3
		setv ov30 141
		setv ov31 151
		setv ov32 161
		setv ov33 169
		setv ov34 178
		doif ov10 < 0
			gsub lstn
			gsub ftsw
			gsub rstr
			setv ov10 1
		elif ov10 > 0
			gsub rstn
			gsub lstr
			setv ov10 -1
		endi
		gsub swim
	endi


** Hunger monitor - this determines behaviour.
	doif ov02 >= 500 and ov02 <= 1499

** Initial movement or flocking?
		doif ov92 = 0
			gsub inim
			gsub obst
			gsub swim
			gsub move
			setv ov92 1
		elif ov92 = 1
			gsub flok
			gsub obst
			gsub swim
			gsub move
		endi

	elif ov02 >= 1500
		setv va44 rand 1 10
		doif va44 = 5
			doif ov10 = 1
				gsub rstn
			elif ov10 = -1
				gsub lstn
			endi
** Swim facing forward when full.
			setv va44 0
			setv va45 rand 1 4
			loop
				addv va44 1
				gsub ftsw
			untl va44 = va45
			doif ov10 = 1
				gsub rstr
			elif ov10 = -1
				gsub lstr
			endi
			gsub obst
			gsub swim
			gsub move
		elif va44 <> 5
			gsub flok
			gsub obst
			gsub swim
			gsub move
		endi
	elif ov02 < 500 and ov02 > 0

** Track down and eat food.
		gsub hunt
		gsub obst
		gsub swim
		gsub move
		gsub eat_

	elif ov02 <= 0
** Die due to starvation.


		gsub deth
	endi

** If not carried, die or be marked for death.
	subr deth
		doif carr = null
			setv va00 posl
			setv va01 post
			doif rtyp room ownr = 9
				setv va60 0
				setv va70 208
			elif rtyp room ownr <> 9
				setv va60 1
				setv va70 209
			endi

** Create Fading Fish Detritus (fish has died rather than been consumed)
*Do if baby
			doif ov05 = 1
				doif ov10 < 0
					inst
					new: simp 2 10 42 "dead_fish" 3 172 1000
					attr va70
					perm 99
					accg va60
					elas 15
					aero 1
					fric 100
					seta va16 targ
					doif tmvt va00 va01 = 1
						mvto va00 va01
						setv ov77 5
						velo -1 0
						tick 10
						kill ownr
					else
						targ va16
						kill targ
						kill ownr
					endi
					slow
				elif ov10 > 0
					inst
					new: simp 2 10 42 "dead_fish" 3 175 1000
					attr va70
					perm 99
					accg va60
					elas 15
					aero 10
					fric 100
					seta va16 targ
					doif tmvt va00 va01 = 1
						mvto va00 va01
						setv ov77 5
						velo 1 0
						tick 10
						kill ownr
					else
						targ va16
						kill targ
						kill ownr
					endi
					slow
				endi
*Die like this if child
			elif ov05 = 2
				doif ov10 < 0
					inst
					new: simp 2 10 42 "dead_fish" 3 166 1000
					attr va70
					perm 99
					accg va60
					elas 15
					aero 10
					fric 100
					seta va16 targ
					doif tmvt va00 va01 = 1
						mvto va00 va01
						setv ov77 5
						velo -1 0
						tick 10
						kill ownr
					else
						targ va16
						kill targ
						kill ownr
					endi

					slow
				elif ov10 > 0
					inst
					new: simp 2 10 42 "dead_fish" 3 169 1000
					attr va70
					perm 99
					accg va60
					elas 15
					aero 10
					fric 100
					seta va16 targ
					doif tmvt va00 va01 = 1
						mvto va00 va01
						setv ov77 5
						velo 1 0
						tick 10
						kill ownr
					else
						targ va16
						kill targ
						kill ownr
					endi

					slow
				endi
*Die like this if adult
			elif ov05 = 3
				doif ov10 < 0
					inst
					new: simp 2 10 42 "dead_fish" 3 160 1000
					attr va70
					perm 99
					accg va60
					elas 15
					aero 10
					fric 100
					seta va16 targ
					doif tmvt va00 va01 = 1
						mvto va00 va01
						setv ov77 5
						velo -1 0
						tick 10
						kill ownr
					else
						targ va16
						kill targ
						kill ownr
					endi

					slow
				elif ov10 > 0
					inst
					new: simp 2 10 42 "dead_fish" 3 163 1000
					attr va70
					perm 99
					accg va60
					elas 15
					aero 10
					fric 100
					seta va16 targ
					doif tmvt va00 va01 = 1
						mvto va00 va01
						setv ov77 5
						velo 1 0
						tick 10
						kill ownr
					else
						targ va16
						kill targ
						kill ownr
					endi

					slow
				endi
			elif ov05 = 4
				doif ov10 < 0
					inst
					new: simp 2 10 42 "dead_fish" 3 154 1000
					attr va70
					perm 99
					accg va60
					elas 15
					aero 10
					fric 100
					seta va16 targ
					doif tmvt va00 va01 = 1
						mvto va00 va01
						setv ov77 5
						velo -1 0
						tick 10
						kill ownr
					else
						targ va16
						kill targ
						kill ownr
					endi

					slow
				elif ov10 > 0
					inst
					new: simp 2 10 42 "dead_fish" 3 160 1000
					attr va70
					perm 99
					accg va60
					elas 15
					aero 10
					fric 100
					seta va16 targ
					doif tmvt va00 va01 = 1
						mvto va00 va01
						setv ov77 5
						velo 1 0
						tick 10
						kill ownr
					else
						targ va16
						kill targ
						kill ownr
					endi

					slow
				endi

			endi
		elif carr <> null and carr = pntr
			setv ov99 5
		elif carr <> null and carr <> pntr
			targ ownr
			kill targ
		endi
	retn



** Room Monitor, stops the little darlings from flying!
	subr room
		doif rtyp room ownr <> 9
			loop
				addv ov86 1
				doif ov86 >= 0 and ov86 <= 6
					addv ov87 .03
				elif ov86 > 6 and ov86 < 100
					addv ov87 .08
				endi
				accg ov87
			untl rtyp room ownr = 9 or ov86 >= 100
			doif ov86 >= 100
				gsub deth
			endi
		endi
		doif rtyp room ownr = 9
			setv ov86 0
			setv ov87 0
		endi
		accg ov87
	retn

** Obstacle checker, stops the little darlings from getting bruises!
	subr obst
		doif obst rght < 45 and ov10 <> -1
			velo 0 0
			setv ov10 -1
			gsub rstn
			gsub lstr
			setv ov12 rand -4 -1
		elif obst left < 45 and ov10 <> 1
			velo 0 0
			setv ov10 1
			gsub lstn
			gsub rstr
			setv ov12 rand 1 4
		endi
		doif obst _up_ < 45 and ov11 <> 1
			velo 0 0
			setv ov11 1
			setv ov13 rand 1 2
		elif obst down < 45 and ov11 <> -1
			velo 0 0
			setv ov11 -1
			setv ov13 rand -2 -1
		endi
	retn


	subr mate
		rnge 50
		inst
		esee 2 15 19
			doif targ <> null
				doif ov05 = 2
					setv ov70 1
					setv va70 1
				endi
			endi
		next
		slow
		doif va70 = 1
			setv ov70 1
		endi
	retn
	subr eggs
** Check how many adults are around, don't want to overcrowd!
		setv va34 0
		rnge 500
		esee 2 15 19
			addv va34 1
		next
** Also check how many other eggs are around.
		rnge 500
		esee 2 18 17
			addv va34 1
		next
		doif va34 < 14
			setv ov08 rand 1 3
		elif va34 > 16
			kill ownr
			stop
		else
			setv ov08 0
		endi
** If you are going to make some eggs, make them.
		doif ov08 <> 0
			setv va80 posl
			setv va81 post
			reps ov08
				new: simp 2 18 17 "neon" 4 188 4000
				attr 199
				BHVR 48
				clac -1
				elas 50
				accg 1
				aero 7
				perm 75
				fric 99
				seta va16 targ
				doif tmvt va80 va81 = 1
					mvto va80 va81
					emit 6 .15
					tick 10
				else
					targ va16
					kill targ
				endi
			repe
			targ ownr
			setv ov70 0
			gsub deth
		endi
	retn

** Initial movement, gives the ones born first something to do.
	subr inim
		doif ov10 = 1
			setv ov12 rand 1 2
			setv ov13 2
			doif ov13 = 1
				setv ov13 -1
			elif ov13 = 2
				setv ov13 1
			endi
		elif ov10 = -1
			setv ov12 rand -2 -1
			setv ov13 2
			setv va13 rand 1 2
			doif va13 = 1
				negv ov13
			endi
		endi
	retn

	subr hunt
		setv va60 0
		loop
			addv va60 1
			setv va50 0
			setv va51 0
			setv va52 0
			setv va53 0

			inst
			rnge 500
			esee 2 ov75 ov71
				setv va53 0
				doif targ <> null
					setv va53 1
					setv va50 relx ownr targ
					addv va51 va50
					setv va50 0
					setv va50 rely ownr targ
					addv va52 va50
					setv va50 0
				endi
			next
			slow
			doif va53 = 0

				setv va76 ov76
				loop
					setv va00 rand 1 4
					setv va51 rand 1 4
					doif va51 = 1
						setv ov75 13
						setv ov71 8
						setv ov76 1
					elif va51 = 2
						setv ov75 3
						setv ov71 6
						setv ov76 2
					elif va51 = 3
						setv ov75 3
						setv ov71 7
						setv ov76 3
					elif va51 = 4
						setv ov75 3
						setv ov71 8
						setv ov76 4
					endi
				untl ov76 <> va76
			endi
		untl va53 = 1 or va60 = 7
		doif va53 = 1
			sets va00 "Prey has been targetted, it's classifier is: 2 "
			adds va00 vtos ov75
			adds va00 " "
			adds va00 vtos ov71

			divv va51 va53
			divv va52 va53
			doif va51 < 0 and ov10 = -1
				setv ov12 rand -2 -1
			elif va51 < 0 and ov10 = 1
				velo 0 0
				gsub rstn
				gsub lstr
				setv ov10 -1
				setv ov12 rand -2 -1
			elif va51 > 0 and ov10 = -1
				velo 0 0
				gsub lstn
				gsub rstr
				setv ov10 1
				setv ov12 rand 1 2
			elif va51 > 0 and ov10 = 1
				setv ov12 rand 1 2
			endi
			doif va52 < 0
				setv ov13 rand -2 -1
			elif va52 > 0
				setv ov13 rand 1 2
			endi
		else

			gsub rndm
		endi
	retn

** Eating nearby food.
	subr eat_
		setv va44 0
		setv va55 0
		rnge 50
		inst
		esee 2 ov75 ov71
			doif targ <> null
				addv va44 1
				doif va44 >= 1
					setv va55 1
					kill targ
				endi
			endi
		next
		slow
		doif va55 = 1
			addv ov02 7500











		endi
	retn

** Flock swimming, or if nobody is nearby - swim randomly!
	subr flok
		setv va50 0
		setv va51 0
		setv va52 0
		setv va53 1
		rnge 200
		inst
		esee 2 15 19
			doif targ <> null
				addv va53 1
				setv va50 relx ownr targ
				addv va51 va50
				setv va50 0
				setv va50 rely ownr targ
				addv va52 va50
				setv va50 0
			endi
		next
		slow
		doif va53 > 1
			divv va51 va53
			divv va52 va53
			doif va51 < 0 and ov10 = -1
				setv ov12 rand -2 -1
			elif va51 < 0 and ov10 = 1
				gsub rstn
				gsub lstr
				setv ov10 -1
				setv ov12 rand -2 -1
			elif va51 > 0 and ov10 = -1
				gsub lstn
				gsub rstr
				setv ov10 1
				setv ov12 rand 1 2
			elif va51 > 0 and ov10 = 1
				setv ov12 rand 1 2
			endi
			doif va52 < 0
				setv ov13 rand -2 -1
			elif va52 > 0
				setv ov13 rand 1 2
			endi
		else
			gsub rndm
		endi
	retn

** Movement - simply that.
	subr move
		velo ov12 ov13
	retn

** Random swimming, if you can't find food or a nearby fish to follow.
	subr rndm
		setv va64 rand 1 10
		doif va64 = 6 and ov10 = 1
			velo 0 0
			setv ov10 -1
			gsub rstn
			gsub lstr
			setv ov12 rand -2 -1
		elif va64 = 6 and ov10 = -1
			velo 0 0
			setv ov10 1
			gsub lstn
			gsub rstr
			setv ov12 rand 1 2
		endi
		setv va64 rand 1 10
		doif va64 = 7 and ov11 = 1
			setv ov13 rand -1 0
			setv ov11 -1
		elif va64 = 7 and ov11 = -1
			setv ov13 rand 0 1
			setv ov11 1
		endi
	retn

** Left start turn.
	subr lstn
		base ov32
		anim [0 1 2 3 4 5 6 7 8]
		over
	retn

** Right start turn.
	subr rstn
		base ov33
		anim [8 7 6 5 4 3 2 1 0]
		over
	retn

** Left start turn reversed.
	subr lstr
		base ov32
		anim [8 7 6 5 4 3 2 1 0]
		over
	retn

** Right start turn reversed.
	subr rstr
		base ov33
		anim [0 1 2 3 4 5 6 7 8]
		over
	retn

** Front swimming.
	subr ftsw
		base ov34
		anim [0 1 2 3 4 5 6 7 8 9]
		velo 0 0
		velo -1 1
		velo 1 -1
		velo 0 -1
		velo 0 1
		velo 1 0
		velo -1 0
		velo 0 0
	retn

** Left or Right facing swimming.
	subr swim
		doif ov10 = 1
			base ov31
			anim [0 1 2 3 4 5 6 7 8 9 255]
		elif ov10 = -1
			base ov30
			anim [0 1 2 3 4 5 6 7 8 9 255]
		endi

	retn
endm

** Fish Detritus Timer
scrp 2 10 42 9
	doif ov77 = 5
		wait 100
		pose 1
		wait 100
		pose 2
		wait 100
		kill ownr
	elif ov77 = 8
		wait 100
		pose 1
		wait 100
		pose 2
		wait 100
		pose 3
		wait 100
		kill ownr
	endi
endm

*Egg eat script
scrp 2 18 17 12

	stim writ from 80 1
	kill ownr
endm

*Remove scripts
rscr
enum 2 18 17
	kill targ
next
enum 2 15 19
	kill targ
next
enum 2 10 42
	kill targ
next
scrx 2 10 42 9
scrx 2 15 19 9
scrx 2 18 17 9
scrx 2 18 17 12
endm
