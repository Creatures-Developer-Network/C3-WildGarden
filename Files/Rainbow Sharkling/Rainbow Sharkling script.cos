*GB Template
*# Pray-File "GB_Rainbowsharkling.agent"
*# DS-Name "Rainbow Sharkling"
*# Depend shark.c16
*# Attach gb_c3_conv2.c16

*# desc = "C3 Rainbow Sharkling raw, buggy, unsupported conversion."
*# Agent Animation File = "gb_c3_conv2.c16"
*# Agent Animation Gallery = "gb_c3_conv2"
*# Agent Sprite First Image = 19
*# GB_Category = 5
*# Agent Author = "Creature Labs"

** RAINBOW SHARKLING
*
* Should now predate clownfish, handlefish, neonfish and angelfish :-)
*
*
setv va60 rand 60 255
setv va61 rand 60 255
setv va62 rand 60 255
setv va40 3879
setv va41 2192
addv va60 1
new: simp 2 16 4 "shark" 153 0 4100
attr 199
clac -1
elas 20
aero 1
accg 0
perm 64
tint va60 va61 va62 128 128
mvsf game "ch_x" game "ch_y"
** ov01 is life (rises each timer script).
setv ov01 0
** ov02 is energy (lowers each timer script).
setv ov02 550
** ov05 is the life stage. Not set in the install.
seta ov16 null
**    Initial Poses.
setv va50 rand 0 1
setv ov61 40
setv ov73 1
setv ov74 0
doif va50 = 0
	setv ov10 -1
	pose 0
elif va50 = 1
	setv ov10 1
	pose 8
endi
velo 0 0
** ov71 is the prey: 15 for clownfish, 16 for handlefish, 19 for neonfish and 14 for angelfish.
setv va51 rand 1 4
doif va51 = 1
	setv ov71 14
elif va51 = 2
	setv ov71 15
elif va51 = 3
	setv ov71 16
elif va51 = 4
	setv ov71 19
endi
** Save Colours to object variable
setv ov20 va60
setv ov21 va61
setv ov22 va62
tick 1

endm

*There was a fish eat script in here.
*scrp 2 16 4 12
*	targ from
*	stim writ from 80 1
*	kill ownr
*endm

scrp 2 16 4 9
** Check current room.
	gsub room

** If marked for death, die dammit!
	doif ov99 = 5
		gsub deth
	endi

** If too old, die!
	doif ov01 >= 3000
		gsub deth
	endi

** Age slightly.
	addv ov01 1

** Mark as being fertile
	doif ov01 > 1200 and ov19 = 0
		setv ov05 2
		setv ov72 0
		setv ov19 1
	endi

** Use up energy.
	subv ov02 1

** give birth if pregnant
	doif ov70 = 1
		gsub repr
		setv ov70 0
		gsub mark
	endi

** If marked for death, increase likelihood of dying.
	doif ov80 = 1
		addv ov81 1
		doif ov81 = 15
			gsub deth
		endi
	endi


** Mating / Breeding.
	doif ov05 = 2 and ov72 = 0 and ov80 <> 1


		gsub mate

	endi

** Hunger monitor - this determines behaviour.
	doif ov02 >= 500

** Initial movement or flocking?
		doif ov92 = 0
			gsub inim
			gsub obst
			gsub swim
			gsub move
			setv ov92 1
		elif ov92 = 1
			setv va00 rand 1 5
			doif va00 <= 2
				gsub flok
			else
				gsub rndm
			endi
			gsub obst
			gsub swim
			gsub move
		endi
	elif ov02 < 500 and ov02 > 0

** Track down and eat food.
		gsub hunt
		gsub obst
		gsub swim
		gsub move
		gsub eat_

	elif ov02 <= 0
** Die due to starvation.
		gsub deth
	endi





** If not carried, die or be marked for death.
	subr deth
		inst
		doif carr = null or carr <> pntr
			targ ownr
			kill targ
		elif carr <> pntr
			setv ov99 5
		endi
		slow
	retn

** Room Monitor, stops the little darlings from flying!
	subr room
		doif rtyp room ownr <> 9
			loop
				addv ov86 1
				doif ov86 >= 0 and ov86 <= 6
					addv ov87 .03
				elif ov86 > 6 and ov86 < 100
					addv ov87 .08
				endi
				accg ov87
			untl rtyp room ownr = 9 or ov86 >= 100
			doif ov86 >= 100
				gsub deth
			endi
		endi
		doif rtyp room ownr = 9
			setv ov86 0
			setv ov87 0
		endi
		accg ov87
	retn

** Obstacle checker, stops the little darlings from getting bruises!
	subr obst
		doif obst rght < 100 and ov10 > 0
			velo 0 0
			setv ov10 -1
			gsub golt
			setv ov12 rand -6 -3
		elif obst left < 100 and ov10 < 0
			velo 0 0
			setv ov10 1
			gsub gort
			setv ov12 rand 3 6
		endi
		doif obst _up_ < 200 and ov11 <= 0
			velo 0 0
			setv ov11 1
			setv ov13 2
		elif obst down < 200 and ov11 >= 0
			velo 0 0
			setv ov11 -1
			setv ov13 -2
		endi
	retn


	subr mate
		rnge 100
		inst
		esee 2 16 4
			doif targ <> null
				doif ov05 = 2
					setv va70 1
					setv va20 ov20
					setv va21 ov21
					setv va22 ov22
				endi
			endi
		next
		slow
		doif va70 = 1
			setv ov70 1
			setv ov23 va20
			setv ov24 va21
			setv ov25 va22
		endi
	retn


	subr repr
** Depending on how many sharks are around, make more.
		setv ov08 0
** Check how many adults are around, don't want to overcrowd!
		setv va34 0
		rnge 1000
		esee 2 16 4
			addv va34 1
		next
** Depending on how many of each are around, make more (or don't!)
		doif va34 <= 5
			setv ov08 rand 1 20
			doif ov08 = 5
				setv ov08 rand 1 3
			else
				setv ov08 rand 1 2
			endi
		else
			setv ov08 0
		endi
** If you are going to make some new sharklings, make them.
		doif ov08 <> 0
			reps ov08



*** Random Colour Mutations (or possibly not)
				setv va00 rand 1 5
				doif va00 = 5
					setv va20 rand 06 255
					addv va20 ov20
					divv va20 2
					doif va20 < 50
						addv va20 20
					endi
				else
					setv va20 ov20
				endi
				setv va00 rand 1 5
				doif va00 = 5
					setv va21 rand 60 255
					addv va21 ov21
					divv va21 2
					doif va20 < 50
						addv va20 20
					endi
				else
					setv va21 ov21
				endi
				setv va00 rand 1 5
				doif va00 = 5
					setv va22 rand 60 255
					addv va22 ov22
					divv va22 2
					doif va20 < 50
						addv va20 20
					endi
				else
					setv va22 ov22
				endi
** Add up all Red Values (both parents and random mutations)
				addv va26 ov20
				addv va26 ov23
				addv va26 va20
** Add up all Green Values (both parents and random mutations)
				addv va27 ov21
				addv va27 ov24
				addv va27 va21
** Add up all Blue Values (both parents and random mutations)		
				addv va28 ov22
				addv va28 ov25
				addv va28 va22
** Divide all three tints by 3
				divv va26 3
				divv va27 3
				divv va28 3
				setv va80 posl
				setv va81 post
				new: simp 2 16 4 "shark" 153 0 4100
				attr 199
				clac -1
				elas 20
				aero 1
				accg 0
				perm 64
				tint va26 va27 va28 128 128
				mvto va80 va81
** ov01 is life (rises each timer script).
				setv ov01 0
** ov02 is energy (lowers each timer script).
				setv ov02 550
** ov05 is the life stage. Not set in the install.
				seta ov16 null
				setv va50 rand 0 1
				setv ov61 40
** ov70 is the prey: 15 for clownfish, 16 for handlefish, 19 for neonfish and 14 for angelfish.
				setv va51 rand 1 4
				doif va51 = 1
					setv ov71 14
				elif va51 = 2
					setv ov71 15
				elif va51 = 3
					setv ov71 16
				elif va51 = 4
					setv ov71 19
				endi
				setv ov73 1
				setv ov74 0
				doif va50 = 0
					setv ov10 -1
					pose 0
				elif va50 = 1
					setv ov10 1
					pose 8
				endi
** Set shark's colours
				setv ov20 va26
				setv ov21 va27
				setv ov22 va28
				velo 0 0
				tick 1
			repe
			targ ownr
			setv ov70 0
			gsub mark
		endi
	retn
	subr mark
		setv ov80 1
	retn
** Initial movement, gives the ones born first something to do.
	subr inim
		doif ov10 = 1
			setv ov12 rand 3 6
			setv ov13 1
			doif ov13 = 1
				setv ov13 -1
			elif ov13 = 2
				setv ov13 1
			endi
		elif ov10 = -1
			setv ov12 rand -6 -3
			setv ov13 1
			setv va13 rand 1 2
			doif va13 = 1
				negv ov13
			endi
		endi
	retn


























** Finding clownfish, or in this case, moving generally towards some.
	subr hunt
		setv va60 0
		loop
			addv va60 1

			setv va50 0
			setv va51 0
			setv va52 0
			setv va53 0
			rnge 1000

			inst
			esee 2 15 ov71
				setv va53 0
				doif targ <> null
					setv va53 1
					setv va50 relx ownr targ
					addv va51 va50
					setv va50 0
					setv va50 rely ownr targ
					addv va52 va50
					setv va50 0
				endi
			next
			slow
			doif va53 = 0

				loop
					setv ov71 rand 14 19
				untl ov71 <> 17 or ov71 <> 18
			endi
		untl va53 = 1 or va60 = 7
		doif va53 = 1



			divv va51 va53
			divv va52 va53
			doif va51 < 0 and ov10 = -1
				setv ov12 rand -6 -3
			elif va51 < 0 and ov10 = 1
				velo 0 0
				gsub golt
				setv ov10 -1
				setv ov12 rand -6 -3
			elif va51 > 0 and ov10 = -1
				velo 0 0
				gsub gort
				setv ov10 1
				setv ov12 rand 3 6
			elif va51 > 0 and ov10 = 1
				setv ov12 rand 3 6
			endi
			doif va52 < 0
				setv ov13 -1
			elif va52 > 0
				setv ov13 1
			endi
		else

			setv va00 rand 1 2
			doif va00 = 1
				gsub rndm
			elif va00 = 2
				gsub flok
			endi
		endi
	retn
** Finding neonfish, or in this case, moving generally towards it.
** Flock swimming, or if nobody is nearby - swim randomly!
	subr flok
		setv va50 0
		setv va51 0
		setv va52 0
		setv va53 1
		rnge 1000
		inst
		esee 2 16 4
			doif targ <> null
				addv va53 1
				setv va50 relx ownr targ
				addv va51 va50
				setv va50 0
				setv va50 rely ownr targ
				addv va52 va50
				setv va50 0
			endi
		next
		slow
		doif va53 > 1
			divv va51 va53
			divv va52 va53
			doif va51 < 0 and ov10 = -1
				setv ov12 rand -6 -3
			elif va51 < 0 and ov10 = 1
				gsub golt
				setv ov10 -1
				setv ov12 rand -6 -3
			elif va51 > 0 and ov10 = -1
				gsub gort
				setv ov10 1
				setv ov12 rand 3 6
			elif va51 > 0 and ov10 = 1
				setv ov12 rand 3 6
			endi
			doif va52 < 0
				setv ov13 -1
			elif va52 > 0
				setv ov13 1
			endi
		else
			gsub rndm
		endi
	retn

** Movement - simply that.
	subr move
		velo ov12 ov13
	retn

** Random swimming, if you can't find food or other sharks to follow.
	subr rndm
		setv va64 rand 1 10
		doif va64 = 6 and ov10 = 1
			velo 0 0
			setv ov10 -1
			gsub golt
			setv ov12 rand -6 -3
		elif va64 = 6 and ov10 = -1
			velo 0 0
			setv ov10 1
			gsub gort
			setv ov12 rand 3 6
		endi
		setv va64 rand 1 10
		doif va64 = 7 and ov11 = 1
			setv ov13 rand -1 0
			setv ov11 -1
		elif va64 = 7 and ov11 = -1
			setv ov13 rand 0 1
			setv ov11 1
		endi
	retn
** Eating nearby food.
	subr eat_
		setv va44 0
		setv va55 0
		rnge 50
		inst
		esee 2 15 ov71
			doif targ <> null
				addv va44 1
				doif va44 >= 1
					setv va55 1
					kill targ
				endi
			endi
		next
		slow
		doif va55 = 1
			addv ov02 4000













		endi
	retn
* Turn from Left to Right (go right)
	subr gort
		velo 2 0
		anim [16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 8 9 10 11 12 13 14 15]
		over
	retn
* Turn from Right to Left (go left)
	subr golt
		velo -2 0
		anim [31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 0 1 2 3 4 5 6 7]
		over
	retn
** Left or Right facing swimming.
	subr swim
		wait rand 1 7
		doif ov10 < 0
			frat 2
			anim [0 1 2 3 4 5 6 7 255]
		elif ov10 > 0
			frat 2
			anim [8 9 10 11 12 13 14 15 255]
		endi
	retn
endm

rscr
enum 2 16 4
	kill targ
next
scrx 2 16 4 9
endm
